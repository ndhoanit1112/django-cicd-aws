version: 0.2

phases:
  pre_build:
    commands:
      - echo "Connecting to ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - echo "Link docker-compose.yml"
      - ln -sf docker-compose.prod.yml docker-compose.yml
      - echo "Link settings.py"
      - cd app
      - ln -sf settings_prod.py settings.py
      - cd ../
      - echo "Prepare env"
      - touch .env
      - echo "DB_NAME=$DB_NAME" >> .env
      - echo "DB_USER=$DB_USER" >> .env
      - echo "DB_PASSWORD=$DB_PASSWORD" >> .env
      - echo "DB_HOST=$DB_HOST" >> .env
      - echo "DB_PORT=$DB_PORT" >> .env
      - echo "DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY" >> .env
      - echo "AWS_SQS_ACCESS_KEY_ID=$AWS_SQS_ACCESS_KEY_ID" >> .env
      - echo "AWS_SQS_SECRET_ACCESS_KEY=$AWS_SQS_SECRET_ACCESS_KEY" >> .env
      - echo "AWS_SQS_REGION=$AWS_SQS_REGION" >> .env

  build:
    commands:
      - echo "Build and start Docker containers"
      - docker-compose up --build -d

  post_build:
    commands:
      - echo "Stop Docker containers"
      - docker-compose stop
      - echo "Start Docker containers again"
      - docker-compose up -d
      - echo "Run unit tests"
      - docker exec django-deploy_webapp python3 /app/manage.py test
      - docker tag django-deploy_webapp:latest $WEB_ECR_REPO_URI
      - echo "Push webapp image to ECR"
      - docker push $WEB_ECR_REPO_URI
      - docker tag django-deploy_celery:latest $CELERY_ECR_REPO_URI
      - echo "Push celery image to ECR"
      - docker push $CELERY_ECR_REPO_URI
      - echo "Update DB"
      - docker exec django-deploy_webapp python manage.py makemigrations
      - docker exec django-deploy_webapp python manage.py migrate
      - echo "Stop Docker containers"
      - docker-compose stop
      - printf '[{"name":"%s","imageUri":"%s"}]' $WEB_CONTAINER_NAME $WEB_ECR_REPO_URI:latest > imagedefinitions.json
      - pwd; ls -al; cat imagedefinitions.json
      - printf '[{"name":"%s","imageUri":"%s"}]' $CELERY_CONTAINER_NAME $CELERY_ECR_REPO_URI:latest > imagedefinitions_celery.json
      - pwd; ls -al; cat imagedefinitions_celery.json

artifacts:
    files:
      - imagedefinitions.json
      - imagedefinitions_celery.json
